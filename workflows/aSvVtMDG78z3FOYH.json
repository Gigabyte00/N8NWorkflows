{
  "active": false,
  "connections": {
    "Get API Key": {
      "main": [
        [
          {
            "node": "Registered API Keys",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check API Key": {
      "main": [
        [
          {
            "node": "API Key Identified",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Secured Webhook": {
      "main": [
        [
          {
            "node": "Check API Key",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out Users": {
      "main": [
        [
          {
            "node": "Find API Key",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "API Key Identified": {
      "main": [
        [
          {
            "node": "Respond to Webhook (success)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Respond to Webhook (unauthorized)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Registered API Keys": {
      "main": [
        [
          {
            "node": "Split Out Users",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-07-19T01:23:43.779Z",
  "id": "aSvVtMDG78z3FOYH",
  "isArchived": false,
  "meta": {
    "templateId": "5174"
  },
  "name": "Creating a Secure Webhook - MUST HAVE",
  "nodes": [
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "2ab01b9f-473f-4f1b-8ddf-8d5a7b706323",
              "name": "registered_api_keys",
              "type": "array",
              "value": "[\n   {\n      \"user_id\":\"user_1\",\n      \"api_key\":\"test\"\n   },\n   {\n      \"user_id\":\"user_2\",\n      \"api_key\":\"sk-lihefoihz12121ZFzk124zehfAZJAOJZ14joEKe1h\"\n   }\n]"
            }
          ]
        },
        "options": {}
      },
      "id": "d776b55a-65fe-4e12-9071-58911fa9c5cc",
      "name": "Registered API Keys",
      "type": "n8n-nodes-base.set",
      "position": [
        416,
        1024
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "0e476976-504d-4d21-a5d1-849fe54d322f",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              },
              "leftValue": "={{ $json.user_id }}",
              "rightValue": "={{ $('Secured Webhook').item.json.headers['x-api-key'] }}"
            }
          ]
        },
        "options": {}
      },
      "id": "d20bdc9b-3020-4fa3-88c3-b6c3d5a585b2",
      "name": "API Key Identified",
      "type": "n8n-nodes-base.if",
      "position": [
        736,
        512
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "content": "### ‚öôÔ∏è Key Verification Logic\n\nThis node takes the API key from the incoming request and asks our \"database\" (the second webhook) if it's valid.\n\n**In a real-world scenario, you would replace this and the nodes below with a single Database node (e.g., Supabase, Postgres) to perform the lookup.**",
        "height": 420,
        "width": 300,
        "color": 3
      },
      "id": "73ee78a3-9e0c-4f24-a05f-f860dc8fda88",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        368,
        240
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"status\": \"success\",\n  \"user_id\": \"{{ $json.user_id }}\"\n}",
        "options": {}
      },
      "id": "b34ad49e-351a-4f42-8336-d4300d442c50",
      "name": "Respond to Webhook (success)",
      "type": "n8n-nodes-base.respondToWebhook",
      "position": [
        960,
        400
      ],
      "typeVersion": 1.4
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\n  \"error\": \"Please provide a valid x-api-key header.\"\n}",
        "options": {
          "responseCode": 401
        }
      },
      "id": "2da5855a-d54a-43f1-b4c5-3ff510a10bd3",
      "name": "Respond to Webhook (unauthorized)",
      "type": "n8n-nodes-base.respondToWebhook",
      "position": [
        960,
        608
      ],
      "typeVersion": 1.4
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "tutorial/secure-webhook",
        "authentication": "headerAuth",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "0b56b704-4dd6-490a-9998-f8eb2ef0a00e",
      "name": "Secured Webhook",
      "type": "n8n-nodes-base.webhook",
      "position": [
        192,
        512
      ],
      "webhookId": "bf0be3b1-f140-4bc5-9040-a0e71dd78661",
      "typeVersion": 2
    },
    {
      "parameters": {
        "url": "={{ $env.WEBHOOK_URL + ($env.N8N_ENDPOINT_WEBHOOK ?? \"webhook\") }}/tutorial/secure-webhook/api-keys",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "api_key",
              "value": "={{ $json.headers['x-api-key'] }}"
            }
          ]
        },
        "options": {}
      },
      "id": "7308010d-5050-4e5e-8c8b-c57194b88516",
      "name": "Check API Key",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        480,
        512
      ],
      "typeVersion": 4.2,
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "526ec1b1-4f6d-41ea-b35a-1347c01aa03a",
              "operator": {
                "name": "filter.operator.equals",
                "type": "string",
                "operation": "equals"
              },
              "leftValue": "={{ $json.api_key }}",
              "rightValue": "={{ $('Get API Key').last().json.body.api_key }}"
            }
          ]
        },
        "options": {}
      },
      "id": "88070916-27b2-42fb-8005-970b6d5a08fc",
      "name": "Find API Key",
      "type": "n8n-nodes-base.filter",
      "position": [
        848,
        1024
      ],
      "typeVersion": 2.2,
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "path": "tutorial/secure-webhook/api-keys",
        "authentication": "headerAuth",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "2a06aaa0-1ac3-4750-9770-6eec7e9310a9",
      "name": "Get API Key",
      "type": "n8n-nodes-base.webhook",
      "position": [
        192,
        1024
      ],
      "webhookId": "bf0be3b1-f140-4bc5-9040-a0e71dd78661",
      "typeVersion": 2
    },
    {
      "parameters": {
        "fieldToSplitOut": "registered_api_keys",
        "options": {}
      },
      "id": "3803f9b8-deec-4262-a76b-bfd72d572493",
      "name": "Split Out Users",
      "type": "n8n-nodes-base.splitOut",
      "position": [
        640,
        1024
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $env.WEBHOOK_URL + ($env.N8N_ENDPOINT_WEBHOOK ?? \"webhook\") }}/tutorial/secure-webhook",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "x-api-key",
              "value": "test"
            }
          ]
        },
        "options": {}
      },
      "id": "d81a0dd5-9c90-4fee-a7ec-46e9aabb53a3",
      "name": "Test Secure Webhook",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -176,
        512
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "content": "### ‚ñ∂Ô∏è Public Endpoint & Tester\n\n*   **`Secured Webhook`**: This is your public-facing endpoint. It listens for requests containing an `x-api-key` header.\n*   **`Test Secure Webhook`**: Use this node to test the endpoint. Change the `x-api-key` header value to test valid and invalid keys.",
        "height": 340,
        "width": 600,
        "color": 6
      },
      "id": "ca63d58d-4683-4dbc-bd1e-6fd2724152f7",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -256,
        320
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "### üì¶ Mock Database\n\nThese nodes simulate a database of users and their API keys.\n\n*   **`Get API Key`**: A private webhook that receives a key and checks it against the list.\n*   **`Registered API Keys`**: **EDIT THIS NODE** to add or remove the API keys you want to be considered valid. Each key should be unique to a user.",
        "height": 380,
        "width": 1020,
        "color": 7
      },
      "id": "14afef1c-6a99-46f5-96e1-c536a9afde69",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        112,
        832
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "#### ‚úÖ Gatekeeper\n\nThis IF node checks the result from our \"database\".\n\n*   If a user was found for the given API key, it proceeds to the **success** response.\n*   If not, it sends a **401 Unauthorized** error.",
        "height": 580,
        "width": 440,
        "color": 7
      },
      "id": "12074ea9-65a9-4696-8c87-c77842f44467",
      "name": "Sticky Note3",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        688,
        208
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## Was this helpful? Let me know!\n\nI really hope this tutorial helped you understand how to build secured webhooks better. Your feedback is incredibly valuable and helps me create better resources for the n8n community.\n\n### **Share Your Thoughts & Ideas**\n\nWhether you have a suggestion, found a typo, or just want to say thanks, I'd love to hear from you!\nHere's a simple n8n form built for this purpose:\n\n#### ‚û°Ô∏è **[Click here to give feedback](https://api.ia2s.app/form/templates/feedback?template=Secure%20Webhook%20Tutorial)**\n\n### **Ready to Build Something Great?**\n\nIf you're looking to take your n8n skills or business automation to the next level, I can help.\n\n**üéì n8n Coaching:** Want to become an n8n pro? I offer one-on-one coaching sessions to help you master workflows, tackle specific problems, and build with confidence.\n#### ‚û°Ô∏è **[Book a Coaching Session](https://api.ia2s.app/form/templates/coaching?template=Secure%20Webhook%20Tutorial)**\n\n**üíº n8n Consulting:** Have a complex project, an integration challenge, or need a custom workflow built for your business? Let's work together to create a powerful automation solution.\n#### ‚û°Ô∏è **[Inquire About Consulting Services](https://api.ia2s.app/form/templates/consulting?template=Secure%20Webhook%20Tutorial)**\n\n---\n\nHappy Automating!\nLucas Peyrin",
        "height": 800,
        "width": 540,
        "color": 4
      },
      "id": "5a0e2e8a-74df-403d-94ef-d5b8b5a0bd13",
      "name": "Sticky Note12",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1168,
        400
      ],
      "typeVersion": 1
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-07-19T01:23:43.779Z",
  "versionId": "42ac76ea-9998-4dc0-8afb-a20cc8da346f"
}